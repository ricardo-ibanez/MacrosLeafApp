/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tjavacomun;

import bbdd.Conexion;
import com.sun.jdi.connect.spi.Connection;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import bbdd.Conexion;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import bbdd.Conexion;
import static bbdd.Conexion.conectar;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ricardo Ibanez
 */
public class Recetas extends javax.swing.JFrame {

    String usuario = null;
    int caloriasPor100 = 0;
    int gramosTotales = 0;
    int proteinasTotales = 0;
    int grasasTotales = 0;
    int hidratosTotales = 0;
    int caloriasTotales = 0;
    public boolean bandera = false;

    public Recetas() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setTitle("MACROSLEAF");
        setIconImage(getIconImage());
        cargarDatos();

    }

    public Recetas(String usuario) {

        this.usuario = usuario;
        System.out.println("Estamos en perfil y el nombre de usuario es " + usuario);
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setTitle("MACROSLEAF");
        setIconImage(getIconImage());
        cargarDatos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        texto = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        btnReceta = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        bienvenido = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        comboAlimentos = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        btnAlimento = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        spinGramos = new javax.swing.JSpinner();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        texto.setFont(new java.awt.Font("Times New Roman", 1, 56)); // NOI18N
        texto.setForeground(new java.awt.Color(255, 255, 255));
        texto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/texto.png"))); // NOI18N
        getContentPane().add(texto, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 620, 150));

        btnSalir.setBackground(new java.awt.Color(0, 0, 255));
        btnSalir.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSalir.setForeground(new java.awt.Color(255, 255, 255));
        btnSalir.setText("Atrás");
        btnSalir.setBorder(new javax.swing.border.MatteBorder(null));
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 750, 160, 50));

        btnReceta.setBackground(new java.awt.Color(51, 153, 255));
        btnReceta.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnReceta.setForeground(new java.awt.Color(255, 255, 255));
        btnReceta.setText("Añadir Receta");
        btnReceta.setBorder(new javax.swing.border.MatteBorder(null));
        btnReceta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecetaActionPerformed(evt);
            }
        });
        getContentPane().add(btnReceta, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 740, 160, 50));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bienvenido.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bienvenido.setForeground(new java.awt.Color(0, 153, 0));
        jPanel1.add(bienvenido, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 280, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/perfil_resized 70.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 204));
        jLabel6.setText(" Crea tus recetas para añadirlas a tu día");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 530, 40));

        jLabel7.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 0));
        jLabel7.setText("Gramos del Alimento :");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 250, 210, 40));

        txtNombre.setBackground(new java.awt.Color(255, 255, 255));
        txtNombre.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(0, 0, 0));
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 310, 40));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/alimento_resized.png"))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 20, 150, 150));

        comboAlimentos.setBackground(new java.awt.Color(255, 255, 255));
        comboAlimentos.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        comboAlimentos.setForeground(new java.awt.Color(0, 0, 0));
        comboAlimentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAlimentosActionPerformed(evt);
            }
        });
        jPanel1.add(comboAlimentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 200, 270, 40));

        jLabel8.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 102, 0));
        jLabel8.setText("Nombre Receta :");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, 210, 40));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(new javax.swing.border.MatteBorder(null));
        jScrollPane1.setForeground(new java.awt.Color(0, 0, 0));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Alimento", "Gramos", "Proteinas", "Hidratos", "Grasas", "Kcal Totales", "       ELIMINAR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, 760, 200));

        btnAlimento.setBackground(new java.awt.Color(51, 153, 255));
        btnAlimento.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAlimento.setForeground(new java.awt.Color(255, 255, 255));
        btnAlimento.setText("Añadir Alimento");
        btnAlimento.setBorder(new javax.swing.border.MatteBorder(null));
        btnAlimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlimentoActionPerformed(evt);
            }
        });
        jPanel1.add(btnAlimento, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 200, 160, 50));

        jLabel9.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 0));
        jLabel9.setText("Añade Alimentos :");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 210, 40));

        spinGramos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        spinGramos.setModel(new javax.swing.SpinnerNumberModel(0, null, 1000, 1));
        jPanel1.add(spinGramos, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 250, 130, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 820, 550));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fondo.jpg"))); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 920, 830));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        MenuPrincipal mp = new MenuPrincipal(usuario);
        mp.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAlimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlimentoActionPerformed
        System.out.println((int) spinGramos.getValue());
        if (comboAlimentos != null) {

            if ((int) spinGramos.getValue() > 0) {

                agregarAlimentoATabla();

            } else {

                JOptionPane.showMessageDialog(null, "Debes seleccionar los Gramos del Alimento...", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {

            JOptionPane.showMessageDialog(null, "Debes seleccionar un Alimento...", "Información", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_btnAlimentoActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void comboAlimentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAlimentosActionPerformed

    }//GEN-LAST:event_comboAlimentosActionPerformed

    private void btnRecetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecetaActionPerformed

        if (txtNombre.getText().length() < 1) {

            JOptionPane.showMessageDialog(null, "Debes darle un nombre a la Receta", "Campo Incompleto", JOptionPane.ERROR_MESSAGE);
        } else {

            int respuesta = JOptionPane.showConfirmDialog(null, "¿Estás seguro de que los datos introducidos son correctos?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (respuesta == JOptionPane.YES_OPTION) {

                String nombreReceta = txtNombre.getText(); // Obtener el nombre de la receta del campo de texto

                // Verificar si la receta ya existe
                if (existeReceta(nombreReceta)) {
                    JOptionPane.showMessageDialog(null, "¡La receta ya existe!", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    try {
                        Conexion.conectar();
                        PreparedStatement verificar = Conexion.conectar().prepareStatement("SELECT id FROM usuarios WHERE nombre = ?");
                        verificar.setString(1, usuario);
                        ResultSet rs = verificar.executeQuery();
                        if (rs.next()) {
                            int idUsu = rs.getInt("id");
                            PreparedStatement verificar2 = Conexion.conectar().prepareStatement("SELECT id, nombre FROM alimento WHERE id_usuario = ?");
                            verificar2.setInt(1, idUsu);
                            ResultSet rs2 = verificar2.executeQuery();
                            if (rs2.next()) {
                                // Sumar los valores de las columnas de la tabla
                                int[] sumas = sumarColumnas();
                                int gramosTotales = sumas[0];
                                int proteinasTotales = sumas[1];
                                int hidratosTotales = sumas[2];
                                int grasasTotales = sumas[3];
                                int caloriasTotales = sumas[4];

                                // Insertar la receta con los valores sumados
                                PreparedStatement psReceta = Conexion.conectar().prepareStatement("INSERT INTO receta(nombre,calorias,grasas,hidratos,gramos,proteina,id_usuario) VALUES (?,?,?,?,?,?,?)", PreparedStatement.RETURN_GENERATED_KEYS);
                                psReceta.setString(1, txtNombre.getText());
                                psReceta.setInt(2, caloriasTotales);
                                psReceta.setInt(3, grasasTotales);
                                psReceta.setInt(4, hidratosTotales);
                                psReceta.setInt(5, gramosTotales);
                                psReceta.setInt(6, proteinasTotales);
                                psReceta.setInt(7, idUsu);

                                psReceta.executeUpdate();

                                // Obtener el ID de la receta recién insertada
                                ResultSet generatedKeys = psReceta.getGeneratedKeys();
                                int idReceta = -1;
                                if (generatedKeys.next()) {
                                    idReceta = generatedKeys.getInt(1);
                                }

                                // Insertar filas en la tabla intermedia receta_alimento
                                if (idReceta != -1) {
                                    DefaultTableModel modeloTabla = (DefaultTableModel) tabla.getModel();
                                    int rowCount = modeloTabla.getRowCount();
                                    for (int i = 0; i < rowCount; i++) {
                                        String nombreAlimento = (String) modeloTabla.getValueAt(i, 0);
                                        int idAlimento = obtenerIdAlimento(nombreAlimento, idUsu);
                                        if (idAlimento != -1) {
                                            PreparedStatement psRecetaAlimento = Conexion.conectar().prepareStatement("INSERT INTO receta_alimento(receta_id, alimento_id) VALUES (?, ?)");
                                            psRecetaAlimento.setInt(1, idReceta);
                                            psRecetaAlimento.setInt(2, idAlimento);
                                            psRecetaAlimento.executeUpdate();
                                        }
                                    }
                                }

                                JOptionPane.showMessageDialog(null, "Receta Registrada con Éxito");
                            }

                            this.dispose();
                            Recetas r = new Recetas(usuario);
                            r.setVisible(true);
                        }

                    } catch (SQLException e) {
                        System.out.println("Error en la conexión: " + e);
                    }
                }
            } else if (respuesta == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "Introduce los nuevos datos y asegúrate de que sean correctos...", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRecetaActionPerformed
//

    private int obtenerIdAlimento(String nombreAlimento, int idUsuario) throws SQLException {
        PreparedStatement ps = Conexion.conectar().prepareStatement("SELECT id FROM alimento WHERE nombre = ? AND id_usuario = ?");
        ps.setString(1, nombreAlimento);
        ps.setInt(2, idUsuario);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            return rs.getInt("id");
        } else {
            return -1; // Si no se encuentra el alimento, retorna -1
        }
    }

    public boolean existeReceta(String nombreReceta) {
        try {
            Conexion.conectar();
            PreparedStatement ps = Conexion.conectar().prepareStatement("SELECT nombre FROM receta WHERE nombre = ? and id_usuario = ?");
            ps.setString(1, nombreReceta);
            ps.setInt(2, obtenerIdUsuario());
            ResultSet rs = ps.executeQuery();

            return rs.next(); // Si next() retorna true, significa que la receta ya existe
        } catch (SQLException e) {
            // Manejar cualquier excepción que pueda ocurrir
            e.printStackTrace();
            return false;
        } finally {
            // Cerrar recursos, como la conexión y la declaración
            // Esto se hace en un bloque finally para asegurarse de que se cierren incluso si ocurre una excepción
            try {
                Conexion.conectar().close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    public int obtenerIdUsuario() {

        Conexion.conectar();
        PreparedStatement verificar4;
        try {
            verificar4 = Conexion.conectar().prepareStatement("SELECT id FROM usuarios WHERE nombre = ?");

            verificar4.setString(1, usuario);
            ResultSet rs = verificar4.executeQuery();
            if (rs.next()) {
                int id = rs.getInt("id");
                return id;
            } else {

                return 0;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Recetas.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;

    }


    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        // Obtener la columna y la fila que fueron clickeadas
        int column = tabla.getColumnModel().getColumnIndexAtX(evt.getX()); // Columna
        int row = evt.getY() / tabla.getRowHeight(); // Fila

        // Verificar que la fila y la columna están dentro del rango
        if (row < tabla.getRowCount() && row >= 0 && column == 6) {
            // Eliminar la fila seleccionada
            ((DefaultTableModel) tabla.getModel()).removeRow(row);
        }
    }//GEN-LAST:event_tablaMouseClicked

    /**
     * @param args the command line arguments
     */
    @Override
    public Image getIconImage() {
        Image icono = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("images/logo.png"));

        return icono;
    }

    public static void main(String args[]) {

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Recetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Recetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Recetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Recetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Recetas().setVisible(true);
            }
        });
    }

    private int[] sumarColumnas() {
        int gramosTotales = 0;
        int proteinasTotales = 0;
        int hidratosTotales = 0;
        int grasasTotales = 0;
        int caloriasTotales = 0;

        DefaultTableModel modeloTabla = (DefaultTableModel) tabla.getModel();
        int rowCount = modeloTabla.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            gramosTotales += (int) modeloTabla.getValueAt(i, 1);
            proteinasTotales += (int) modeloTabla.getValueAt(i, 2);
            hidratosTotales += (int) modeloTabla.getValueAt(i, 3);
            grasasTotales += (int) modeloTabla.getValueAt(i, 4);
            caloriasTotales += (int) modeloTabla.getValueAt(i, 5);
        }

        return new int[]{gramosTotales, proteinasTotales, hidratosTotales, grasasTotales, caloriasTotales};
    }

    public void agregarAlimentoATabla() {
        try {
            // Establecer la conexión a la base de datos
            System.out.println(comboAlimentos.getSelectedItem().toString());
            Conexion.conectar();
            // Consulta SQL para obtener los detalles del alimento seleccionado
            String consulta = "SELECT * FROM alimento WHERE nombre = ?";

            // Preparar la consulta
            PreparedStatement statement = Conexion.conectar().prepareStatement(consulta);
            statement.setString(1, comboAlimentos.getSelectedItem().toString());

            // Ejecutar la consulta y obtener el resultado
            ResultSet resultado = statement.executeQuery();

            // Insertar los detalles del alimento en la tabla de tu base de datos
            if (resultado.next()) {

                // Obtener los detalles del alimento
                caloriasPor100 = resultado.getInt(3);
                gramosTotales = (int) spinGramos.getValue();
                proteinasTotales = (resultado.getInt(6) * gramosTotales) / 100;
                grasasTotales = (resultado.getInt(4) * gramosTotales) / 100;
                hidratosTotales = (resultado.getInt(5) * gramosTotales) / 100;
                caloriasTotales = (caloriasPor100 * gramosTotales) / 100;

                DefaultTableModel modeloTabla = (DefaultTableModel) tabla.getModel();

                // Limpiar la tabla antes de agregar los nuevos detalles
                if (!bandera) {
                    modeloTabla.setRowCount(0);
                    bandera = true;

                }

                // Agregar una fila a la tabla con los detalles del alimento seleccionado
                modeloTabla.addRow(new Object[]{
                    comboAlimentos.getSelectedItem().toString(),
                    gramosTotales,
                    proteinasTotales,
                    hidratosTotales,
                    grasasTotales,
                    caloriasTotales,
                    "             ❌ "
                //Aqui es donde iria el ultimo elemento para eliminar el RESTO

                });

            } else {
                JOptionPane.showMessageDialog(null, "No se encontraron detalles para el alimento seleccionado");
            }

            // Cerrar los recursos
            resultado.close();
            statement.close();
            Conexion.conectar().close();
        } catch (SQLException e) {
            // Manejar cualquier excepción que pueda ocurrir
            e.printStackTrace();
        }
    }

    public void cargarDatos() {

        //PARTE DE LOS DATOS
        bienvenido.setText("Bienvenido " + usuario);

        try {
            Conexion.conectar();
            PreparedStatement verificar = Conexion.conectar().prepareStatement("SELECT id FROM usuarios WHERE nombre = ?");
            verificar.setString(1, usuario);
            ResultSet rs = verificar.executeQuery();
            if (rs.next()) {
                int idUsu = rs.getInt("id");
                PreparedStatement verificar2 = Conexion.conectar().prepareStatement("SELECT * FROM alimento WHERE id_usuario = ?");
                verificar2.setInt(1, idUsu);
                ResultSet rs2 = verificar2.executeQuery();
                while (rs2.next()) {

                    String nombreAlimento = rs2.getString(2);
                    comboAlimentos.addItem(nombreAlimento);

                }

                Conexion.conectar().close();

            }

        } catch (SQLException e) {
            System.out.println("Error en la conexión: " + e);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bienvenido;
    private javax.swing.JButton btnAlimento;
    private javax.swing.JButton btnReceta;
    private javax.swing.JButton btnSalir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboAlimentos;
    private javax.swing.JLabel fondo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spinGramos;
    private javax.swing.JTable tabla;
    private javax.swing.JLabel texto;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
