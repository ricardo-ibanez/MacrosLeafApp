/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tjavacomun;

import bbdd.Conexion;
import com.sun.jdi.connect.spi.Connection;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import bbdd.Conexion;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import bbdd.Conexion;
import static bbdd.Conexion.conectar;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.text.SimpleDateFormat;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ricardo Ibanez
 */
public class MiDia extends javax.swing.JFrame {

    
       /*deberia guardar el id de cada alimento o receta añadida para borrar ese en concreto:
    y luego tengo que restar los macros obtenidos a los de mi IMB*/
    
    
    String usuario = null;
    int caloriasPor100 = 0;
    int gramosTotales = 0;
    int proteinasTotales = 0;
    int grasasTotales = 0;
    int hidratosTotales = 0;
    int caloriasTotales = 0;
    public boolean bandera = false;

    long millisec = System.currentTimeMillis();
    Date fechadehoy = new Date(millisec);

    public MiDia() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setTitle("MACROSLEAF");
        setIconImage(getIconImage());
        cargarDatos();
        cargarDatosReceta();

    }

    public MiDia(String usuario) {

        this.usuario = usuario;
        System.out.println("Estamos en perfil y el nombre de usuario es " + usuario);
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setTitle("MACROSLEAF");
        setIconImage(getIconImage());
        cargarDatos();
        cargarDatosReceta();
        cargarTablaDelDia(obtenerIdUsuario());
        cargarSumasEnTabla2(obtenerIdUsuario(), fechadehoy, 1);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        texto = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        comboRecetas = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboAlimentos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        btnAlimento = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        spinGramos = new javax.swing.JSpinner();
        btnReceta = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla2 = new javax.swing.JTable();
        btnActualizarTabla = new javax.swing.JButton();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        texto.setFont(new java.awt.Font("Times New Roman", 1, 56)); // NOI18N
        texto.setForeground(new java.awt.Color(255, 255, 255));
        texto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/texto.png"))); // NOI18N
        getContentPane().add(texto, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 620, 120));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboRecetas.setBackground(new java.awt.Color(255, 255, 255));
        comboRecetas.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        comboRecetas.setForeground(new java.awt.Color(0, 0, 0));
        comboRecetas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRecetasActionPerformed(evt);
            }
        });
        jPanel1.add(comboRecetas, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 210, 190, 40));

        jLabel10.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 102, 0));
        jLabel10.setText("Añade Recetas :");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 170, 40));

        jLabel7.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 0));
        jLabel7.setText("Gramos del Alimento :");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 210, 40));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/dia_resized.png"))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 20, 150, 150));

        comboAlimentos.setBackground(new java.awt.Color(255, 255, 255));
        comboAlimentos.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        comboAlimentos.setForeground(new java.awt.Color(0, 0, 0));
        comboAlimentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAlimentosActionPerformed(evt);
            }
        });
        jPanel1.add(comboAlimentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 190, 40));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(new javax.swing.border.MatteBorder(null));
        jScrollPane1.setForeground(new java.awt.Color(0, 0, 0));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Alimento", "Gramos", "Proteinas", "Hidratos", "Grasas", "Kcal Totales", "       ELIMINAR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 750, 140));

        btnAlimento.setBackground(new java.awt.Color(51, 153, 255));
        btnAlimento.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAlimento.setForeground(new java.awt.Color(255, 255, 255));
        btnAlimento.setText("Añadir Alimento");
        btnAlimento.setBorder(new javax.swing.border.MatteBorder(null));
        btnAlimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlimentoActionPerformed(evt);
            }
        });
        jPanel1.add(btnAlimento, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 70, 150, 40));

        jLabel9.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 0));
        jLabel9.setText("Añade Alimentos :");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 170, 40));

        spinGramos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        spinGramos.setModel(new javax.swing.SpinnerNumberModel(0, null, 1000, 1));
        jPanel1.add(spinGramos, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 130, 30));

        btnReceta.setBackground(new java.awt.Color(51, 153, 255));
        btnReceta.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnReceta.setForeground(new java.awt.Color(255, 255, 255));
        btnReceta.setText("Añadir Receta");
        btnReceta.setBorder(new javax.swing.border.MatteBorder(null));
        btnReceta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecetaActionPerformed(evt);
            }
        });
        jPanel1.add(btnReceta, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 210, 160, 40));

        btnSalir.setBackground(new java.awt.Color(0, 0, 255));
        btnSalir.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSalir.setForeground(new java.awt.Color(255, 255, 255));
        btnSalir.setText("Atrás");
        btnSalir.setBorder(new javax.swing.border.MatteBorder(null));
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        jPanel1.add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, 160, 50));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 102, 204));
        jLabel8.setText("MACROS RESTANTES");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 450, 210, 40));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 102, 204));
        jLabel11.setText("Añade Alimentos y Recetas para completar tus requerimientos");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 570, 40));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 102, 204));
        jLabel12.setText("TUS ALIMENTOS DE HOY");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 270, 230, 40));

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setBorder(new javax.swing.border.MatteBorder(null));
        jScrollPane3.setForeground(new java.awt.Color(0, 0, 0));

        tabla2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Kcal", "Proteinas", "Hidratos", "Grasas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tabla2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tabla2);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 490, 640, 60));

        btnActualizarTabla.setBackground(new java.awt.Color(51, 153, 255));
        btnActualizarTabla.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnActualizarTabla.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizarTabla.setText("Actualizar Tabla");
        btnActualizarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarTablaActionPerformed(evt);
            }
        });
        jPanel1.add(btnActualizarTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 560, -1, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, 820, 650));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fondo.jpg"))); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 920, 830));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        MenuPrincipal mp = new MenuPrincipal(usuario);
        mp.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAlimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlimentoActionPerformed
        System.out.println((int) spinGramos.getValue());
        if (comboAlimentos != null) {

            if ((int) spinGramos.getValue() > 0) {

                agregarAlimentoATabla();
                try {
                    Conexion.conectar();
                    PreparedStatement verificar = Conexion.conectar().prepareStatement("SELECT * FROM alimento WHERE id_usuario = ?");
                    verificar.setInt(1, obtenerIdUsuario());

                    ResultSet rs = verificar.executeQuery();
                    if (rs.next()) {

                        int idUsu = obtenerIdUsuario();
                        //no tiene sentido sumar un alimento nmi la recetas ya estas sumadaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaas

                        int proteinasTotales = rs.getInt(6);
                        int hidratosTotales = rs.getInt(5);
                        int grasasTotales = rs.getInt(4);
                        int caloriasTotales = rs.getInt(3);
                        int gramosTotales = (int) spinGramos.getValue();

                        // Insertar la receta con los valores sumados
                        PreparedStatement psReceta = Conexion.conectar().prepareStatement("INSERT INTO dia (id_usuario,gramos,proteinas,hidratos,grasas,calorias,fecha,nombre) VALUES (?,?,?,?,?,?,?,?)", PreparedStatement.RETURN_GENERATED_KEYS);
                        psReceta.setInt(1, idUsu);
                        psReceta.setInt(2, gramosTotales);
                        psReceta.setInt(3, proteinasTotales * ((int) spinGramos.getValue() / 100));
                        psReceta.setInt(4, hidratosTotales * ((int) spinGramos.getValue() / 100));
                        psReceta.setInt(5, grasasTotales * ((int) spinGramos.getValue() / 100));
                        psReceta.setInt(6, caloriasTotales * ((int) spinGramos.getValue() / 100));
                        //FECHA
                        long millis = System.currentTimeMillis();
                        Date fechaActual = new Date(millis);

                        // Establecer la fecha y el ID del usuario
                        psReceta.setDate(7, fechaActual);
                        //NOMBRE
                        psReceta.setString(8, comboAlimentos.getSelectedItem().toString());
                        ;

                        psReceta.executeUpdate();
                        cargarTablaDelDia(obtenerIdUsuario());
                        cargarSumasEnTabla2(obtenerIdUsuario(), fechadehoy, 1);

                    } else {

                    }

                } catch (SQLException e) {
                    System.out.println("Error en la conexión: " + e);
                }

            } else {

                JOptionPane.showMessageDialog(null, "Debes seleccionar los gramos del Alimento...", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        }


    }//GEN-LAST:event_btnAlimentoActionPerformed
    public void cargarSumasEnTabla2(int idUsuario, java.sql.Date fecha, int gramosCliente) {
        // Obtener las sumas de las columnas del día
        int[] sumas = sumarColumnasDelDia(idUsuario, fecha);

        // Crear un modelo de tabla para la tabla2
        DefaultTableModel modeloTabla2 = (DefaultTableModel) tabla2.getModel();

        // Limpiar la tabla2 antes de agregar nuevas filas
        modeloTabla2.setRowCount(0);

        // Agregar una fila a la tabla2 con las sumas de las columnas
        modeloTabla2.addRow(new Object[]{
            sumas[0] * gramosCliente,
            sumas[1] * gramosCliente,
            sumas[2] * gramosCliente,
            sumas[3] * gramosCliente

        });
    }

    public int[] sumarColumnasDelDia(int idUsuario, java.sql.Date fecha) {
        int[] sumas = new int[5]; // Un arreglo para almacenar las sumas de las cinco columnas numéricas

        try {
            // Conectar a la base de datos
            Conexion.conectar();

            // Consulta SQL para sumar las columnas
            String sql = "SELECT SUM(calorias) ,SUM(proteinas), SUM(hidratos), SUM(grasas) FROM dia WHERE id_usuario = ? AND fecha = ?";
            PreparedStatement ps = Conexion.conectar().prepareStatement(sql);
            ps.setInt(1, idUsuario);
            ps.setDate(2, fecha);

            // Ejecutar la consulta y obtener el resultado
            ResultSet rs = ps.executeQuery();

            // Leer el resultado y almacenar las sumas en el arreglo
            if (rs.next()) {

                sumas[0] = rs.getInt(1);
                sumas[1] = rs.getInt(2);
                sumas[2] = rs.getInt(3);
                sumas[3] = rs.getInt(4);
            }

            // Cerrar los recursos
            rs.close();
            ps.close();
            Conexion.conectar().close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return sumas;
    }
    private void comboAlimentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAlimentosActionPerformed

    }//GEN-LAST:event_comboAlimentosActionPerformed

    private void btnRecetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecetaActionPerformed

        if (comboRecetas != null) {

            agregarRecetasATabla();
            try {
                Conexion.conectar();
                PreparedStatement verificar = Conexion.conectar().prepareStatement("SELECT * FROM receta WHERE id_usuario = ?");
                verificar.setInt(1, obtenerIdUsuario());

                ResultSet rs = verificar.executeQuery();
                if (rs.next()) {

                    int idUsu = obtenerIdUsuario();
                    //no tiene sentido sumar un alimento nmi la recetas ya estas sumadaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaas

                    int proteinasTotales = rs.getInt(7);
                    int hidratosTotales = rs.getInt(5);
                    int grasasTotales = rs.getInt(4);
                    int caloriasTotales = rs.getInt(3);
                    int gramosTotales = rs.getInt(6);

                    // Insertar la receta con los valores sumados
                    PreparedStatement psReceta = Conexion.conectar().prepareStatement("INSERT INTO dia (id_usuario,gramos,proteinas,hidratos,grasas,calorias,fecha,nombre) VALUES (?,?,?,?,?,?,?,?)", PreparedStatement.RETURN_GENERATED_KEYS);
                    psReceta.setInt(1, idUsu);
                    psReceta.setInt(2, gramosTotales);
                    psReceta.setInt(3, proteinasTotales);
                    psReceta.setInt(4, hidratosTotales);
                    psReceta.setInt(5, grasasTotales);
                    psReceta.setInt(6, caloriasTotales);
                    //FECHA
                    long millis = System.currentTimeMillis();
                    Date fechaActual = new Date(millis);

                    // Establecer la fecha y el ID del usuario
                    psReceta.setDate(7, fechaActual);
                    //NOMBRE
                    psReceta.setString(8, comboRecetas.getSelectedItem().toString());
                    ;

                    psReceta.executeUpdate();

                    cargarTablaDelDia(obtenerIdUsuario());
                    cargarSumasEnTabla2(obtenerIdUsuario(), fechadehoy, 1);

                } else {
                    JOptionPane.showMessageDialog(null, "Ha ocurrido un Error, intentado de nuevo...", "Información", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (SQLException e) {
                System.out.println("Error en la conexión: " + e);
            }

        }


    }//GEN-LAST:event_btnRecetaActionPerformed
//

    private int obtenerIdAlimento(String nombreAlimento, int idUsuario) throws SQLException {
        PreparedStatement ps = Conexion.conectar().prepareStatement("SELECT id FROM alimento WHERE nombre = ? AND id_usuario = ?");
        ps.setString(1, nombreAlimento);
        ps.setInt(2, idUsuario);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            return rs.getInt("id");
        } else {
            return -1; // Si no se encuentra el alimento, retorna -1
        }
    }

    public boolean existeReceta(String nombreReceta) {
        try {
            Conexion.conectar();
            PreparedStatement ps = Conexion.conectar().prepareStatement("SELECT nombre FROM receta WHERE nombre = ? and id_usuario = ?");
            ps.setString(1, nombreReceta);
            ps.setInt(2, obtenerIdUsuario());
            ResultSet rs = ps.executeQuery();

            return rs.next(); // Si next() retorna true, significa que la receta ya existe
        } catch (SQLException e) {
            // Manejar cualquier excepción que pueda ocurrir
            e.printStackTrace();
            return false;
        } finally {
            // Cerrar recursos, como la conexión y la declaración
            // Esto se hace en un bloque finally para asegurarse de que se cierren incluso si ocurre una excepción
            try {
                Conexion.conectar().close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    public int obtenerIdUsuario() {

        Conexion.conectar();
        PreparedStatement verificar4;
        try {
            verificar4 = Conexion.conectar().prepareStatement("SELECT id FROM usuarios WHERE nombre = ?");

            verificar4.setString(1, usuario);
            ResultSet rs = verificar4.executeQuery();
            if (rs.next()) {
                int id = rs.getInt("id");
                return id;
            } else {

                return 0;
            }
        } catch (SQLException ex) {
            Logger.getLogger(MiDia.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;

    }


    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        // Obtener la columna y la fila que fueron clickeadas
        int column = tabla.getColumnModel().getColumnIndexAtX(evt.getX()); // Columna
        int row = evt.getY() / tabla.getRowHeight(); // Fila

        // Verificar que la fila y la columna están dentro del rango
        if (row < tabla.getRowCount() && row >= 0 && column == 6) {
            // Obtener el ID del elemento a eliminar
            String nombre = tabla.getValueAt(row, 0).toString(); // Suponiendo que el ID está en la primera columna

            // Eliminar la fila de la base de datos
            eliminarFilaDeBaseDeDatos(nombre);
           

            // Eliminar la fila seleccionada de la JTable
            ((DefaultTableModel) tabla.getModel()).removeRow(row);
            cargarTablaDelDia(obtenerIdUsuario());
            cargarSumasEnTabla2(obtenerIdUsuario(), fechadehoy, 1);
        }
    }//GEN-LAST:event_tablaMouseClicked

    public void cargarTablaDelDia(int idUsuario) {
        // Obtener la fecha de hoy en el formato adecuado
        long millis = System.currentTimeMillis();
        Date fechaActual = new Date(millis);
        java.sql.Date fechaHoy = new java.sql.Date(fechaActual.getTime());

        // Limpiar la JTable antes de cargar los nuevos datos
        DefaultTableModel modeloTabla = (DefaultTableModel) tabla.getModel();
        modeloTabla.setRowCount(0);

        try {
            // Conectar a la base de datos
            Conexion.conectar();

            // Consulta SQL para obtener los registros del día actual
            String sql = "SELECT * FROM dia WHERE id_usuario = ? AND fecha = ?";
            PreparedStatement ps = Conexion.conectar().prepareStatement(sql);
            ps.setInt(1, idUsuario);
            ps.setDate(2, fechaHoy);

            // Ejecutar la consulta y obtener el resultado
            ResultSet rs = ps.executeQuery();

            // Procesar el resultado y llenar la JTable
            while (rs.next()) {
                int id = rs.getInt("id");
                String nombreAlimento = rs.getString("nombre"); // Asume que hay una columna 'nombre_alimento'
                int gramos = rs.getInt("gramos");
                int proteinas = rs.getInt("proteinas");
                int hidratos = rs.getInt("hidratos");
                int grasas = rs.getInt("grasas");
                int calorias = rs.getInt("calorias");

                // Añadir una fila a la JTable
                modeloTabla.addRow(new Object[]{nombreAlimento, gramos, proteinas, hidratos, grasas, calorias, "             ❌ "});
            }

            // Cerrar los recursos
            rs.close();
            ps.close();
            Conexion.conectar().close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
// Método para eliminar una fila de la base de datos

    private void eliminarFilaDeBaseDeDatos(String nombre) {
        try {
            Conexion.conectar();
            String sql = "DELETE FROM dia WHERE nombre = ? AND id_Usuario = ?";
            PreparedStatement ps = Conexion.conectar().prepareStatement(sql);
            ps.setString(1, nombre);
            ps.setInt(2, obtenerIdUsuario());
            ps.executeUpdate();
            ps.close();
            Conexion.conectar().close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void comboRecetasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRecetasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboRecetasActionPerformed

    private void tabla2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tabla2MouseClicked

    private void btnActualizarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarTablaActionPerformed
        cargarTablaDelDia(obtenerIdUsuario());
        cargarSumasEnTabla2(obtenerIdUsuario(), fechadehoy, 1);

    }//GEN-LAST:event_btnActualizarTablaActionPerformed

    /**
     * @param args the command line arguments
     */
    @Override
    public Image getIconImage() {
        Image icono = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("images/logo.png"));

        return icono;
    }

    public static void main(String args[]) {

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiDia().setVisible(true);
            }
        });
    }

    private int[] sumarColumnas() {
        int gramosTotales = 0;
        int proteinasTotales = 0;
        int hidratosTotales = 0;
        int grasasTotales = 0;
        int caloriasTotales = 0;

        DefaultTableModel modeloTabla = (DefaultTableModel) tabla.getModel();
        int rowCount = modeloTabla.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            gramosTotales += (int) modeloTabla.getValueAt(i, 1);
            proteinasTotales += (int) modeloTabla.getValueAt(i, 2);
            hidratosTotales += (int) modeloTabla.getValueAt(i, 3);
            grasasTotales += (int) modeloTabla.getValueAt(i, 4);
            caloriasTotales += (int) modeloTabla.getValueAt(i, 5);
        }

        return new int[]{gramosTotales, proteinasTotales, hidratosTotales, grasasTotales, caloriasTotales};
    }

    public void agregarAlimentoATabla() {
        try {
            // Establecer la conexión a la base de datos
            System.out.println(comboAlimentos.getSelectedItem().toString());
            Conexion.conectar();
            // Consulta SQL para obtener los detalles del alimento seleccionado
            String consulta = "SELECT * FROM alimento WHERE nombre = ?";

            // Preparar la consulta
            PreparedStatement statement = Conexion.conectar().prepareStatement(consulta);
            statement.setString(1, comboAlimentos.getSelectedItem().toString());

            // Ejecutar la consulta y obtener el resultado
            ResultSet resultado = statement.executeQuery();

            // Insertar los detalles del alimento en la tabla de tu base de datos
            if (resultado.next()) {

                // Obtener los detalles del alimento
                caloriasPor100 = resultado.getInt(3);
                gramosTotales = (int) spinGramos.getValue();
                proteinasTotales = (resultado.getInt(6) * gramosTotales) / 100;
                grasasTotales = (resultado.getInt(4) * gramosTotales) / 100;
                hidratosTotales = (resultado.getInt(5) * gramosTotales) / 100;
                caloriasTotales = (caloriasPor100 * gramosTotales) / 100;

                DefaultTableModel modeloTabla = (DefaultTableModel) tabla.getModel();

                // Limpiar la tabla antes de agregar los nuevos detalles
                if (!bandera) {
                    modeloTabla.setRowCount(0);
                    bandera = true;

                }

                // Agregar una fila a la tabla con los detalles del alimento seleccionado
                modeloTabla.addRow(new Object[]{
                    comboAlimentos.getSelectedItem().toString(),
                    gramosTotales,
                    proteinasTotales,
                    hidratosTotales,
                    grasasTotales,
                    caloriasTotales,
                    "             ❌ "
                //Aqui es donde iria el ultimo elemento para eliminar el RESTO

                });

            } else {
                JOptionPane.showMessageDialog(null, "No se encontraron detalles para el alimento seleccionado");
            }

            // Cerrar los recursos
            resultado.close();
            statement.close();
            Conexion.conectar().close();
        } catch (SQLException e) {
            // Manejar cualquier excepción que pueda ocurrir
            e.printStackTrace();
        }
    }

    public void agregarRecetasATabla() {
        try {
            // Establecer la conexión a la base de datos
            System.out.println(comboRecetas.getSelectedItem().toString());
            Conexion.conectar();
            // Consulta SQL para obtener los detalles del alimento seleccionado
            String consulta = "SELECT * FROM receta WHERE nombre = ?";

            // Preparar la consulta
            PreparedStatement statement = Conexion.conectar().prepareStatement(consulta);
            statement.setString(1, comboRecetas.getSelectedItem().toString());

            // Ejecutar la consulta y obtener el resultado
            ResultSet resultado = statement.executeQuery();

            // Insertar los detalles del alimento en la tabla de tu base de datos
            if (resultado.next()) {

                // Obtener los detalles del alimento
                caloriasTotales = resultado.getInt(3);
                gramosTotales = resultado.getInt(6);
                proteinasTotales = (resultado.getInt(7) * gramosTotales) / 100;
                grasasTotales = (resultado.getInt(4) * gramosTotales) / 100;
                hidratosTotales = (resultado.getInt(5) * gramosTotales) / 100;

                DefaultTableModel modeloTabla = (DefaultTableModel) tabla.getModel();

                // Limpiar la tabla antes de agregar los nuevos detalles
                if (!bandera) {
                    modeloTabla.setRowCount(0);
                    bandera = true;

                }

                // Agregar una fila a la tabla con los detalles del alimento seleccionado
                modeloTabla.addRow(new Object[]{
                    comboRecetas.getSelectedItem().toString(),
                    gramosTotales,
                    proteinasTotales,
                    hidratosTotales,
                    grasasTotales,
                    caloriasTotales,
                    "             ❌ "
                //Aqui es donde iria el ultimo elemento para eliminar el RESTO

                });

            } else {
                JOptionPane.showMessageDialog(null, "No se encontraron detalles para el alimento seleccionado");
            }

            // Cerrar los recursos
            resultado.close();
            statement.close();
            Conexion.conectar().close();
        } catch (SQLException e) {
            // Manejar cualquier excepción que pueda ocurrir
            e.printStackTrace();
        }
    }

    public void programarReseteo(DefaultTableModel modeloTabla, int idUsuario) {
        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

        // Calcular el tiempo restante hasta medianoche
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DAY_OF_MONTH, 1);
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);

        long initialDelay = calendar.getTimeInMillis() - System.currentTimeMillis();
        long period = 24 * 60 * 60 * 1000; // 24 horas en milisegundos

        scheduler.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {
                guardarDatos(modeloTabla, obtenerIdUsuario());
                vaciar(modeloTabla);
                System.out.println("Tabla reseteada y datos guardados a las 00:00");
            }
        }, initialDelay, period, TimeUnit.MILLISECONDS);
    }

    public void vaciar(DefaultTableModel modeloTabla) {
        modeloTabla.setRowCount(0);
    }

    public void guardarDatos(DefaultTableModel modeloTabla, int usuario) {
        try {
            Conexion.conectar();
            String sql = "INSERT INTO dias (id_usuario, gramos, proteinas, hidratos, grasas, calorias, fecha) VALUES (?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement ps = Conexion.conectar().prepareStatement(sql);

            //REVISAR COMO OBTENER LAS CALORIAS DE TODOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
            int rowCount = modeloTabla.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                ps.setInt(1, obtenerIdUsuario());
                ps.setString(2, (String) modeloTabla.getValueAt(i, 0));
                ps.setInt(3, (int) modeloTabla.getValueAt(i, 1));
                ps.setInt(4, (int) modeloTabla.getValueAt(i, 2));
                ps.setInt(5, (int) modeloTabla.getValueAt(i, 3));
                ps.setInt(6, (int) modeloTabla.getValueAt(i, 4));
                ps.setInt(7, (int) modeloTabla.getValueAt(i, 5));
                ps.addBatch();
            }
            ps.executeBatch();
            ps.close();
            Conexion.conectar().close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void cargarDatos() {

        try {
            Conexion.conectar();
            PreparedStatement verificar = Conexion.conectar().prepareStatement("SELECT id FROM usuarios WHERE nombre = ?");
            verificar.setString(1, usuario);
            ResultSet rs = verificar.executeQuery();
            if (rs.next()) {
                int idUsu = rs.getInt("id");
                PreparedStatement verificar2 = Conexion.conectar().prepareStatement("SELECT * FROM alimento WHERE id_usuario = ?");
                verificar2.setInt(1, idUsu);
                ResultSet rs2 = verificar2.executeQuery();
                while (rs2.next()) {

                    String nombreAlimento = rs2.getString(2);
                    comboAlimentos.addItem(nombreAlimento);

                }

                Conexion.conectar().close();

            }

        } catch (SQLException e) {
            System.out.println("Error en la conexión: " + e);
        }

    }

    public void cargarDatosReceta() {
        System.out.println("Entra en el metodo de cargar Receta");
        try {
            Conexion.conectar();
            PreparedStatement verificar = Conexion.conectar().prepareStatement("SELECT id FROM usuarios WHERE nombre = ?");
            verificar.setString(1, usuario);
            ResultSet rs = verificar.executeQuery();
            if (rs.next()) {
                int idUsu = rs.getInt("id");
                PreparedStatement verificar2 = Conexion.conectar().prepareStatement("SELECT * FROM receta WHERE id_usuario = ?");
                verificar2.setInt(1, idUsu);
                ResultSet rs2 = verificar2.executeQuery();
                while (rs2.next()) {

                    String nombreReceta = rs2.getString(2);
                    comboRecetas.addItem(nombreReceta);

                }

                Conexion.conectar().close();

            }

        } catch (SQLException e) {
            System.out.println("Error en la conexión: " + e);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarTabla;
    private javax.swing.JButton btnAlimento;
    private javax.swing.JButton btnReceta;
    private javax.swing.JButton btnSalir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboAlimentos;
    private javax.swing.JComboBox<String> comboRecetas;
    private javax.swing.JLabel fondo;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner spinGramos;
    private javax.swing.JTable tabla;
    private javax.swing.JTable tabla2;
    private javax.swing.JLabel texto;
    // End of variables declaration//GEN-END:variables
}
